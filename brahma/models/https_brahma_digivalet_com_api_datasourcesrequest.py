# -*- coding: utf-8 -*-

"""
brahma

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from brahma.models.secure_json_data import SecureJsonData


class HttpsBrahmaDigivaletComApiDatasourcesrequest(object):

    """Implementation of the 'https://brahma.digivalet.com/api/datasourcesrequest' model.

    TODO: type model description here.

    Attributes:
        name (string): TODO: type description here.
        mtype (string): TODO: type description here.
        url (string): TODO: type description here.
        org (string): TODO: type description here.
        access (string): TODO: type description here.
        basic_auth (bool): TODO: type description here.
        database (string): TODO: type description here.
        user (string): TODO: type description here.
        secure_json_data (SecureJsonData): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "url": 'url',
        "org": 'Org',
        "access": 'access',
        "basic_auth": 'basicAuth',
        "database": 'database',
        "user": 'user',
        "secure_json_data": 'secureJsonData'
    }

    def __init__(self,
                 name=None,
                 mtype=None,
                 url=None,
                 org=None,
                 access=None,
                 basic_auth=None,
                 database=None,
                 user=None,
                 secure_json_data=None):
        """Constructor for the HttpsBrahmaDigivaletComApiDatasourcesrequest class"""

        # Initialize members of the class
        self.name = name 
        self.mtype = mtype 
        self.url = url 
        self.org = org 
        self.access = access 
        self.basic_auth = basic_auth 
        self.database = database 
        self.user = user 
        self.secure_json_data = secure_json_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        org = dictionary.get("Org") if dictionary.get("Org") else None
        access = dictionary.get("access") if dictionary.get("access") else None
        basic_auth = dictionary.get("basicAuth") if "basicAuth" in dictionary.keys() else None
        database = dictionary.get("database") if dictionary.get("database") else None
        user = dictionary.get("user") if dictionary.get("user") else None
        secure_json_data = SecureJsonData.from_dictionary(dictionary.get('secureJsonData')) if dictionary.get('secureJsonData') else None
        # Return an object of this model
        return cls(name,
                   mtype,
                   url,
                   org,
                   access,
                   basic_auth,
                   database,
                   user,
                   secure_json_data)
